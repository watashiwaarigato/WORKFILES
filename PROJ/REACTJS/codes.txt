
######### CREATING PROJECT #########

USE GIT BASH TO RUN

# Create project
npm install -g create-react-app
create-react-app my-app

# Run project
cd my-app
npm start

# Delete all files in the src/ using gitbash here
cd my-app
rm -f src/*

# FIRST PROJECT

1.) Add a file named index.css in the src/ folder with this CSS code.
2.) Add a file named index.js in the src/ folder with this JS code.
3.) Add these three lines to the top of index.js in the src/ folder:
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';


######### CODING #########

#SAMPLE CODE USING JSX
const name = 'World';
const element = <h1>Hello {name}</h1>;

ReactDOM.render(
	element,
	document.getElementById('root')
);


#TO RENDER PAGE CONTENT
ReactDOM.render();


#TO CONSTRUC variables stored to variable
const user = {
  firstName: 'Harper',
  lastName: 'Perez'
};


#USING FUNCTION / SAME AS JAVASCRIPT ONLY
function formatName(user) {
    return user.firstName + ' ' + user.lastName;
}


#TO CONSTRUC ELEMENT (OBJECT) stored to variable
const element = (
  <h1>
    Hello, {formatName(user)}!
  </h1>
);


#BABEL / STRUCTURE SIMPLIFIED
These 3 examples are identical:
1.)
const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
);

2.)
const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);
3.)
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};


#SETTING AN INTERVAL
function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(element, document.getElementById('root'));
}

setInterval(tick, 1000);



#USING ES6 class / OOP STYLE
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}


#USING USER-DEFINED FUNCTION
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
const element = <Welcome name="Sara" />;


#USING USER-DEFINED FUNCTION TO ReacDOM.render
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name="Sara" />
      <Welcome name="Cahal" />
      <Welcome name="Edite" />
    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);






#ES6 CLASS FORMAT
constructor(props) {} --> contains props
render () {}          --> contains the first run to class
componentDidMount()   --> output is inserted in the DOM
componentWillUnmount()--> component is ever removed from the DOM



super(props) would pass props to the parent constructor
example:
constructor(props) {
  super(props);
  this.state = {date: new Date()};
}

#REPLACE STATE VALUE INSIDE DOM
// Wrong
this.state.comment = 'Hello';

// Correct
this.setState({comment: 'Hello'});

//Example
this.setState({
  date: 'April 9 2018',
  author: {
    name: 'Kevin Ralph',
    avatar: 'http://placekitten.com/g/64/64',
    text: 'Hellow World'
 }
})

#ES6 CALL FUNCTION INSIDE DOM
ex.
<FormattedDate date={this.state.date} />


#ES6 BINDING ACTION TO BUTTONS
this.handleLoginClick = this.handleLoginClick.bind(this);
//handleLoginClick is the function name


#ES6 calling variable as empty
let button;


#ES6 true or false value
this.setState(prevState => ({
    showWarning: !prevState.showWarning
}));


#Rendering Multiple Components
const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((number) =>
  <li>{number}</li>
);


#get properties of form elements
handleInputChange(event) {
    const target = event.target.value;
}


